<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variable Map</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Creation Control *//
// Create the JavaScript API Maps
js_api = noone;

// Event Variables
event_js_api = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Memory Management</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Memory Management *//
// Destroy the Variables Map
ds_map_destroy(variables);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JS API Trigger</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* JS API Trigger *//
// Make sure the API Map Exists
if(!ds_exists(js_api, ds_type_map))
    exit;

// Determine the API Attributes
var type, name, value;

type = ds_map_find_value(js_api, "type");
name = ds_map_find_value(js_api, "name");
value = ds_map_find_value(js_api, "value");

// Create the Callback Map
js_callback = ds_map_create();

// Add Instance Attributes
ds_map_add(js_callback, "id", id);
ds_map_add(js_callback, "object_index", object_index);
ds_map_add(js_callback, "object_name", object_get_name(object_index));

switch(type)
{
    case "get":
        // Create the Variable Map
        var variables = ds_map_create();

        // Check for Special Case
        if(name == "all")
        {
            // Register all Variables
            ds_map_add(js_callback, "bbox_bottom", bbox_bottom);
            ds_map_add(js_callback, "bbox_left", bbox_bottom);
            ds_map_add(js_callback, "bbox_right", bbox_right);
            ds_map_add(js_callback, "bbox_top", bbox_top);
            ds_map_add(js_callback, "depth", depth);
            ds_map_add(js_callback, "direction", direction);
            ds_map_add(js_callback, "friction", friction);
            ds_map_add(js_callback, "gravity", gravity);
            ds_map_add(js_callback, "gravity_direction", gravity_direction);
            ds_map_add(js_callback, "hspeed", hspeed);
            ds_map_add(js_callback, "image_alpha", image_alpha);
            ds_map_add(js_callback, "image_angle", image_angle);
            ds_map_add(js_callback, "image_index", image_index);
            ds_map_add(js_callback, "image_speed", image_speed);
            ds_map_add(js_callback, "image_xscale", image_xscale);
            ds_map_add(js_callback, "image_yscale", image_yscale);
            ds_map_add(js_callback, "mask_index", mask_index);
            ds_map_add(js_callback, "path_endaction", path_endaction);
            ds_map_add(js_callback, "path_orientation", path_orientation);
            ds_map_add(js_callback, "path_position", path_position);
            ds_map_add(js_callback, "path_positionprevious", path_positionprevious);
            ds_map_add(js_callback, "path_scale", path_scale);
            ds_map_add(js_callback, "path_speed", path_speed);
            ds_map_add(js_callback, "persistent", persistent);
            ds_map_add(js_callback, "solid", solid);
            ds_map_add(js_callback, "timeline_loop", timeline_loop);
            ds_map_add(js_callback, "timeline_position", timeline_position);
            ds_map_add(js_callback, "timeline_running", timeline_running);
            ds_map_add(js_callback, "timeline_speed", timeline_speed);
            ds_map_add(js_callback, "visible", visible);
            ds_map_add(js_callback, "vspeed", vspeed);
            ds_map_add(js_callback, "x", x);
            ds_map_add(js_callback, "xprevious", xprevious);
            ds_map_add(js_callback, "xstart", xstart);
            ds_map_add(js_callback, "y", y);
            ds_map_add(js_callback, "yprevious", yprevious);
            ds_map_add(js_callback, "ystart", ystart);
        }
        else
        {
            switch(name)
            {
                case "bbox_bottom": ds_map_add(js_callback, name, bbox_bottom); break;
                case "bbox_left": ds_map_add(js_callback, name, bbox_bottom); break;
                case "bbox_right": ds_map_add(js_callback, name, bbox_right); break;
                case "bbox_top": ds_map_add(js_callback, name, bbox_top); break;
                case "depth": ds_map_add(js_callback, name, depth); break;
                case "direction": ds_map_add(js_callback, name, direction); break;
                case "friction": ds_map_add(js_callback, name, friction); break;
                case "gravity": ds_map_add(js_callback, name, gravity); break;
                case "gravity_direction": ds_map_add(js_callback, name, gravity_direction); break;
                case "hspeed": ds_map_add(js_callback, name, hspeed); break;
                case "image_alpha": ds_map_add(js_callback, name, image_alpha); break;
                case "image_angle": ds_map_add(js_callback, name, image_angle); break;
                case "image_index": ds_map_add(js_callback, name, image_index); break;
                case "image_speed": ds_map_add(js_callback, name, image_speed); break;
                case "image_xscale": ds_map_add(js_callback, name, image_xscale); break;
                case "image_yscale": ds_map_add(js_callback, name, image_yscale); break;
                case "mask_index": ds_map_add(js_callback, name, mask_index); break;
                case "path_endaction": ds_map_add(js_callback, name, path_endaction); break;
                case "path_orientation": ds_map_add(js_callback, name, path_orientation); break;
                case "path_position": ds_map_add(js_callback, name, path_position); break;
                case "path_positionprevious": ds_map_add(js_callback, name, path_positionprevious); break;
                case "path_scale": ds_map_add(js_callback, name, path_scale); break;
                case "path_speed": ds_map_add(js_callback, name, path_speed); break;
                case "persistent": ds_map_add(js_callback, name, persistent); break;
                case "solid": ds_map_add(js_callback, name, solid); break;
                case "timeline_loop": ds_map_add(js_callback, name, timeline_loop); break;
                case "timeline_position": ds_map_add(js_callback, name, timeline_position); break;
                case "timeline_running": ds_map_add(js_callback, name, timeline_running); break;
                case "timeline_speed": ds_map_add(js_callback, name, timeline_speed); break;
                case "visible": ds_map_add(js_callback, name, visible); break;
                case "vspeed": ds_map_add(js_callback, name, vspeed); break;
                case "x": ds_map_add(js_callback, name, x); break;
                case "xprevious": ds_map_add(js_callback, name, xprevious); break;
                case "xstart": ds_map_add(js_callback, name, xstart); break;
                case "y": ds_map_add(js_callback, name, y); break;
                case "yprevious": ds_map_add(js_callback, name, yprevious); break;
                case "ystart": ds_map_add(js_callback, name, ystart); break;
            }
        }
        break;

    case "set":
        switch(name)
        {
            case "depth": depth = value; break;
            case "direction": direction = value; break;
            case "gravity": gravity = value; break;
            case "gravity_direction": gravity_direction = value; break;
            case "image_alpha": image_alpha = value; break;
            case "image_angle": image_angle = value; break;
            case "image_index": image_index = value; break;
            case "image_speed": image_speed = value; break;
            case "image_xscale": image_xscale = value; break;
            case "image_yscale": image_yscale = value; break;
            case "hspeed": hspeed = value; break;
            case "friction": friction = value; break;
            case "solid": solid = value; break;
            case "path_endaction": path_endaction = value; break;
            case "path_orientation": path_orientation = value; break;
            case "path_position": path_position = value; break;
            case "path_positionprevious": path_positionprevious = value; break;
            case "path_scale": path_scale = value; break;
            case "path_speed": path_speed = value; break;
            case "persistent": persistent = value; break;
            case "visible": visible = value; break;
            case "vspeed": vspeed = value; break;
            case "y": y = value; break;
            case "yprevious": yprevious = value; break;
            case "ystart": ystart = value; break;
            case "x": x = value; break;
            case "xprevious": xprevious = value; break;
            case "xstart": xstart = value; break;
            case "timeline_loop": timeline_loop = value; break;
            case "timeline_position": timeline_position = value; break;
            case "timeline_running": timeline_running = value; break;
            case "timeline_speed": timeline_speed = value; break;
            case "mask_index": mask_index = value; break;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
