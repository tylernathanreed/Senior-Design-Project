<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variable Map</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Creation Control *//
// Create the JavaScript API Maps
js_api = noone;

// Event Variables
event_js_api = 15;

// Debug Information
echo("Created " + object_get_name(object_index) + " (" + string(id) + ") at [" + string(x) + ", " + string(y) + "]");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Memory Management</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Memory Management *//
// Destroy the Variables Map
ds_map_destroy(variables);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JS API Trigger</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* JS API Trigger *//
// Make sure the API Map Exists
if(!ds_exists(js_api, ds_type_map))
{
    echo("par_all (" + string(id) + "): Invalid call to JS API! DS Map " + string(js_api) + " does not exist!");
    exit;
}

// Determine the API Attributes
var type, name, value;

type = ds_map_find_value(js_api, "type");
name = ds_map_find_value(js_api, "name");
value = ds_map_find_value(js_api, "value");

// Create the Callback Map
js_callback = ds_map_create();

// Add Instance Attributes
ds_map_add(js_callback, "id", id);
ds_map_add(js_callback, "object_index", object_index);
ds_map_add(js_callback, "object_name", object_get_name(object_index));

switch(type)
{
    case "get":
        // Check for Special Case
        if(name == "all")
        {
            // Register all Variables
            ds_map_add(js_callback, "bbox_bottom", bbox_bottom);
            ds_map_add(js_callback, "bbox_left", bbox_bottom);
            ds_map_add(js_callback, "bbox_right", bbox_right);
            ds_map_add(js_callback, "bbox_top", bbox_top);
            ds_map_add(js_callback, "depth", depth);
            ds_map_add(js_callback, "direction", direction);
            ds_map_add(js_callback, "friction", friction);
            ds_map_add(js_callback, "gravity", gravity);
            ds_map_add(js_callback, "gravity_direction", gravity_direction);
            ds_map_add(js_callback, "hspeed", hspeed);
            ds_map_add(js_callback, "image_alpha", image_alpha);
            ds_map_add(js_callback, "image_angle", image_angle);
            ds_map_add(js_callback, "image_index", image_index);
            ds_map_add(js_callback, "image_speed", image_speed);
            ds_map_add(js_callback, "image_xscale", image_xscale);
            ds_map_add(js_callback, "image_yscale", image_yscale);
            ds_map_add(js_callback, "mask_index", mask_index);
            ds_map_add(js_callback, "path_endaction", path_endaction);
            ds_map_add(js_callback, "path_orientation", path_orientation);
            ds_map_add(js_callback, "path_position", path_position);
            ds_map_add(js_callback, "path_positionprevious", path_positionprevious);
            ds_map_add(js_callback, "path_scale", path_scale);
            ds_map_add(js_callback, "path_speed", path_speed);
            ds_map_add(js_callback, "persistent", persistent);
            ds_map_add(js_callback, "solid", solid);
            ds_map_add(js_callback, "speed", speed);
            ds_map_add(js_callback, "timeline_loop", timeline_loop);
            ds_map_add(js_callback, "timeline_position", timeline_position);
            ds_map_add(js_callback, "timeline_running", timeline_running);
            ds_map_add(js_callback, "timeline_speed", timeline_speed);
            ds_map_add(js_callback, "visible", visible);
            ds_map_add(js_callback, "vspeed", vspeed);
            ds_map_add(js_callback, "x", x);
            ds_map_add(js_callback, "xprevious", xprevious);
            ds_map_add(js_callback, "xstart", xstart);
            ds_map_add(js_callback, "y", y);
            ds_map_add(js_callback, "yprevious", yprevious);
            ds_map_add(js_callback, "ystart", ystart);
        }
        else
        {
            switch(name)
            {
                case "bbox_bottom": ds_map_add(js_callback, name, bbox_bottom); break;
                case "bbox_left": ds_map_add(js_callback, name, bbox_bottom); break;
                case "bbox_right": ds_map_add(js_callback, name, bbox_right); break;
                case "bbox_top": ds_map_add(js_callback, name, bbox_top); break;
                case "depth": ds_map_add(js_callback, name, depth); break;
                case "direction": ds_map_add(js_callback, name, direction); break;
                case "friction": ds_map_add(js_callback, name, friction); break;
                case "gravity": ds_map_add(js_callback, name, gravity); break;
                case "gravity_direction": ds_map_add(js_callback, name, gravity_direction); break;
                case "hspeed": ds_map_add(js_callback, name, hspeed); break;
                case "image_alpha": ds_map_add(js_callback, name, image_alpha); break;
                case "image_angle": ds_map_add(js_callback, name, image_angle); break;
                case "image_index": ds_map_add(js_callback, name, image_index); break;
                case "image_speed": ds_map_add(js_callback, name, image_speed); break;
                case "image_xscale": ds_map_add(js_callback, name, image_xscale); break;
                case "image_yscale": ds_map_add(js_callback, name, image_yscale); break;
                case "mask_index": ds_map_add(js_callback, name, mask_index); break;
                case "path_endaction": ds_map_add(js_callback, name, path_endaction); break;
                case "path_orientation": ds_map_add(js_callback, name, path_orientation); break;
                case "path_position": ds_map_add(js_callback, name, path_position); break;
                case "path_positionprevious": ds_map_add(js_callback, name, path_positionprevious); break;
                case "path_scale": ds_map_add(js_callback, name, path_scale); break;
                case "path_speed": ds_map_add(js_callback, name, path_speed); break;
                case "persistent": ds_map_add(js_callback, name, persistent); break;
                case "solid": ds_map_add(js_callback, name, solid); break;
                case "speed": ds_map_add(js_callback, name, speed); break;
                case "timeline_loop": ds_map_add(js_callback, name, timeline_loop); break;
                case "timeline_position": ds_map_add(js_callback, name, timeline_position); break;
                case "timeline_running": ds_map_add(js_callback, name, timeline_running); break;
                case "timeline_speed": ds_map_add(js_callback, name, timeline_speed); break;
                case "visible": ds_map_add(js_callback, name, visible); break;
                case "vspeed": ds_map_add(js_callback, name, vspeed); break;
                case "x": ds_map_add(js_callback, name, x); break;
                case "xprevious": ds_map_add(js_callback, name, xprevious); break;
                case "xstart": ds_map_add(js_callback, name, xstart); break;
                case "y": ds_map_add(js_callback, name, y); break;
                case "yprevious": ds_map_add(js_callback, name, yprevious); break;
                case "ystart": ds_map_add(js_callback, name, ystart); break;
            }
        }
        break;

    case "set":
        switch(name)
        {
            case "depth": depth = value; break;
            case "direction": direction = value; break;
            case "gravity": gravity = value; break;
            case "gravity_direction": gravity_direction = value; break;
            case "image_alpha": image_alpha = value; break;
            case "image_angle": image_angle = value; break;
            case "image_index": image_index = value; break;
            case "image_speed": image_speed = value; break;
            case "image_xscale": image_xscale = value; break;
            case "image_yscale": image_yscale = value; break;
            case "hspeed": hspeed = value; break;
            case "friction": friction = value; break;
            case "solid": solid = value; break;
            case "path_endaction": path_endaction = value; break;
            case "path_orientation": path_orientation = value; break;
            case "path_position": path_position = value; break;
            case "path_positionprevious": path_positionprevious = value; break;
            case "path_scale": path_scale = value; break;
            case "path_speed": path_speed = value; break;
            case "persistent": persistent = value; break;
            case "visible": visible = value; break;
            case "vspeed": vspeed = value; break;
            case "y": y = value; break;
            case "yprevious": yprevious = value; break;
            case "ystart": ystart = value; break;
            case "x": x = value; break;
            case "xprevious": xprevious = value; break;
            case "xstart": xstart = value; break;
            case "timeline_loop": timeline_loop = value; break;
            case "timeline_position": timeline_position = value; break;
            case "timeline_running": timeline_running = value; break;
            case "timeline_speed": timeline_speed = value; break;
            case "mask_index": mask_index = value; break;
        }
        break;

    case "get-group":
        switch(name)
        {
            case "bbox":
                ds_map_add(js_callback, "bbox_bottom", bbox_bottom);
                ds_map_add(js_callback, "bbox_left", bbox_bottom);
                ds_map_add(js_callback, "bbox_right", bbox_right);
                ds_map_add(js_callback, "bbox_top", bbox_top);
                break;

            case "gravity":
                ds_map_add(js_callback, "gravity", gravity);
                ds_map_add(js_callback, "gravity_direction", gravity_direction);
                break;

            case "image":
                ds_map_add(js_callback, "image_alpha", image_alpha);
                ds_map_add(js_callback, "image_angle", image_angle);
                ds_map_add(js_callback, "image_index", image_index);
                ds_map_add(js_callback, "image_speed", image_speed);
                ds_map_add(js_callback, "image_xscale", image_xscale);
                ds_map_add(js_callback, "image_yscale", image_yscale);
                break;

            case "path":
                ds_map_add(js_callback, "path_endaction", path_endaction);
                ds_map_add(js_callback, "path_orientation", path_orientation);
                ds_map_add(js_callback, "path_position", path_position);
                ds_map_add(js_callback, "path_positionprevious", path_positionprevious);
                ds_map_add(js_callback, "path_scale", path_scale);
                ds_map_add(js_callback, "path_speed", path_speed);
                break;

            case "timeline":
                ds_map_add(js_callback, "timeline_loop", timeline_loop);
                ds_map_add(js_callback, "timeline_position", timeline_position);
                ds_map_add(js_callback, "timeline_running", timeline_running);
                ds_map_add(js_callback, "timeline_speed", timeline_speed);
                break;

            case "position":
                ds_map_add(js_callback, "x", x);
                ds_map_add(js_callback, "xprevious", xprevious);
                ds_map_add(js_callback, "xstart", xstart);
                ds_map_add(js_callback, "y", y);
                ds_map_add(js_callback, "yprevious", yprevious);
                ds_map_add(js_callback, "ystart", ystart);
                break;

            case "speed":
                ds_map_add(js_callback, "hspeed", hspeed);
                ds_map_add(js_callback, "vspeed", vspeed);
                ds_map_add(js_callback, "speed", speed);
                ds_map_add(js_callback, "direction", direction);
                ds_map_add(js_callback, "friction", friction);
                break;

            case "properties":
                ds_map_add(js_callback, "depth", depth);
                ds_map_add(js_callback, "persistent", persistent);
                ds_map_add(js_callback, "solid", solid);
                ds_map_add(js_callback, "visible", visible);
                break;
        }
        break;

    case "set-group":
        // Make sure the Value is a Map
        if(!ds_exists(value, ds_type_map))
            exit;

        switch(name)
        {
            case "bbox":
                bbox_bottom = ds_map_find_value(value, "bbox_bottom");
                bbox_bottom = ds_map_find_value(value, "bbox_bottom");
                bbox_left = ds_map_find_value(value, "bbox_bottom");
                bbox_right = ds_map_find_value(value, "bbox_right");
                bbox_top = ds_map_find_value(value, "bbox_top");
                break;

            case "gravity":
                gravity = ds_map_find_value(value, "gravity");
                gravity_direction = ds_map_find_value(value, "gravity_direction");
                break;

            case "image":
                image_alpha = ds_map_find_value(value, "image_alpha");
                image_angle = ds_map_find_value(value, "image_angle");
                image_index = ds_map_find_value(value, "image_index");
                image_speed = ds_map_find_value(value, "image_speed");
                image_xscale = ds_map_find_value(value, "image_xscale");
                image_yscale = ds_map_find_value(value, "image_yscale");
                break;

            case "path":
                path_endaction = ds_map_find_value(value, "path_endaction");
                path_orientation = ds_map_find_value(value, "path_orientation");
                path_position = ds_map_find_value(value, "path_position");
                path_positionprevious = ds_map_find_value(value, "path_positionprevious");
                path_scale = ds_map_find_value(value, "path_scale");
                path_speed = ds_map_find_value(value, "path_speed");
                break;

            case "timeline":
                timeline_loop = ds_map_find_value(value, "timeline_loop");
                timeline_position = ds_map_find_value(value, "timeline_position");
                timeline_running = ds_map_find_value(value, "timeline_running");
                timeline_speed = ds_map_find_value(value, "timeline_speed");
                break;

            case "position":
                x = ds_map_find_value(value, "x");
                xprevious = ds_map_find_value(value, "xprevious");
                xstart = ds_map_find_value(value, "xstart");
                y = ds_map_find_value(value, "y");
                yprevious = ds_map_find_value(value, "yprevious");
                ystart = ds_map_find_value(value, "ystart");
                break;

            case "speed":
                hspeed = ds_map_find_value(value, "hspeed");
                vspeed = ds_map_find_value(value, "vspeed");
                speed = ds_map_find_value(value, "speed");
                direction = ds_map_find_value(value, "direction");
                friction = ds_map_find_value(value, "friction");
                break;

            case "properties":
                depth = ds_map_find_value(value, "depth");
                persistent = ds_map_find_value(value, "persistent");
                solid = ds_map_find_value(value, "solid");
                visible = ds_map_find_value(value, "visible");
                break;
        }
        break;

    case "get-list":
    {
        // Make sure the Name is a List
        if(!ds_exists(name, ds_type_list))
            exit;

        // Make sure the Value is a Map
        if(!ds_exists(value, ds_type_map))
            exit;
   
        // Iterate through the Names
        for(var i = 0; i &lt; ds_list_size(name); i++)
        {
            // Determine the Current Name
            var cname = ds_list_find_value(name, i);

            // Add the Current Variable
            switch(cname)
            {
                case "bbox_bottom": ds_map_add(js_callback, cname, bbox_bottom); break;
                case "bbox_left": ds_map_add(js_callback, cname, bbox_bottom); break;
                case "bbox_right": ds_map_add(js_callback, cname, bbox_right); break;
                case "bbox_top": ds_map_add(js_callback, cname, bbox_top); break;
                case "depth": ds_map_add(js_callback, cname, depth); break;
                case "direction": ds_map_add(js_callback, cname, direction); break;
                case "friction": ds_map_add(js_callback, cname, friction); break;
                case "gravity": ds_map_add(js_callback, cname, gravity); break;
                case "gravity_direction": ds_map_add(js_callback, cname, gravity_direction); break;
                case "hspeed": ds_map_add(js_callback, cname, hspeed); break;
                case "image_alpha": ds_map_add(js_callback, cname, image_alpha); break;
                case "image_angle": ds_map_add(js_callback, cname, image_angle); break;
                case "image_index": ds_map_add(js_callback, cname, image_index); break;
                case "image_speed": ds_map_add(js_callback, cname, image_speed); break;
                case "image_xscale": ds_map_add(js_callback, cname, image_xscale); break;
                case "image_yscale": ds_map_add(js_callback, cname, image_yscale); break;
                case "mask_index": ds_map_add(js_callback, cname, mask_index); break;
                case "path_endaction": ds_map_add(js_callback, cname, path_endaction); break;
                case "path_orientation": ds_map_add(js_callback, cname, path_orientation); break;
                case "path_position": ds_map_add(js_callback, cname, path_position); break;
                case "path_positionprevious": ds_map_add(js_callback, cname, path_positionprevious); break;
                case "path_scale": ds_map_add(js_callback, cname, path_scale); break;
                case "path_speed": ds_map_add(js_callback, cname, path_speed); break;
                case "persistent": ds_map_add(js_callback, cname, persistent); break;
                case "solid": ds_map_add(js_callback, cname, solid); break;
                case "speed": ds_map_add(js_callback, cname, speed); break;
                case "timeline_loop": ds_map_add(js_callback, cname, timeline_loop); break;
                case "timeline_position": ds_map_add(js_callback, cname, timeline_position); break;
                case "timeline_running": ds_map_add(js_callback, cname, timeline_running); break;
                case "timeline_speed": ds_map_add(js_callback, cname, timeline_speed); break;
                case "visible": ds_map_add(js_callback, cname, visible); break;
                case "vspeed": ds_map_add(js_callback, cname, vspeed); break;
                case "x": ds_map_add(js_callback, cname, x); break;
                case "xprevious": ds_map_add(js_callback, cname, xprevious); break;
                case "xstart": ds_map_add(js_callback, cname, xstart); break;
                case "y": ds_map_add(js_callback, cname, y); break;
                case "yprevious": ds_map_add(js_callback, cname, yprevious); break;
                case "ystart": ds_map_add(js_callback, cname, ystart); break;
            }
        }
    }

    case "set-list":
    {
        // Make sure the Name is a List
        if(!ds_exists(name, ds_type_list))
            exit;

        // Make sure the Value is a Map
        if(!ds_exists(value, ds_type_map))
            exit;
   
        // Iterate through the Names
        for(var i = 0; i &lt; ds_list_size(name); i++)
        {
            // Determine the Current Name
            var cname = ds_list_find_value(name, i);

            // Add the Current Variable
            switch(cname)
            {
                case "depth": depth = cvalue; break;
                case "direction": direction = cvalue; break;
                case "gravity": gravity = cvalue; break;
                case "gravity_direction": gravity_direction = cvalue; break;
                case "image_alpha": image_alpha = cvalue; break;
                case "image_angle": image_angle = cvalue; break;
                case "image_index": image_index = cvalue; break;
                case "image_speed": image_speed = cvalue; break;
                case "image_xscale": image_xscale = cvalue; break;
                case "image_yscale": image_yscale = cvalue; break;
                case "hspeed": hspeed = cvalue; break;
                case "friction": friction = cvalue; break;
                case "mask_index": mask_index = cvalue; break;
                case "path_endaction": path_endaction = cvalue; break;
                case "path_orientation": path_orientation = cvalue; break;
                case "path_position": path_position = cvalue; break;
                case "path_positionprevious": path_positionprevious = cvalue; break;
                case "path_scale": path_scale = cvalue; break;
                case "path_speed": path_speed = cvalue; break;
                case "persistent": persistent = cvalue; break;
                case "solid": solid = cvalue; break;
                case "speed": speed = cvalue; break;
                case "timeline_loop": timeline_loop = cvalue; break;
                case "timeline_position": timeline_position = cvalue; break;
                case "timeline_running": timeline_running = cvalue; break;
                case "timeline_speed": timeline_speed = cvalue; break;
                case "visible": visible = cvalue; break;
                case "vspeed": vspeed = cvalue; break;
                case "x": x = cvalue; break;
                case "xprevious": xprevious = cvalue; break;
                case "xstart": xstart = cvalue; break;
                case "y": y = cvalue; break;
                case "yprevious": yprevious = cvalue; break;
                case "ystart": ystart = cvalue; break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
