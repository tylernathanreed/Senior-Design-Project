<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_dynamic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sight Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Sight Control *//
// Sight Variables
sight_distance = 384;
sight_angle = 25;
sight_precision = 1;
sight_polygon = noone;

// Target Variables
target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sight Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Sight Control *//
// Construct the Sight Polygon
if(ds_exists(sight_polygon, ds_type_list))
    ds_list_destroy(sight_polygon);

sight_polygon = ds_list_create();

// Initialize the Previous Point Iterators
var xprev, yprev;

// Determine the Number of Iterations
var iterations = sight_angle * sight_precision;

for(var i = 0; i &lt; iterations; i++)
{
    // Determine the Current Angles (in Degrees)
    var angle = i / iterations * sight_angle * 2 - sight_angle + image_angle;;

    // Determine the Current Point
    var xx, yy

    xx = x + lengthdir_x(sight_distance, angle);
    yy = y + lengthdir_y(sight_distance, angle);

    // Determine whether or not the Sight is Blocked
    if(collision_line(x, y, xx, yy, par_static, true, true))
    {
        // Search Across the Line
        var low = 0, high = sight_distance;

        while(high - low &gt; 1 &amp;&amp; high &gt; low)
        {
            // Determine the Middle Point
            var mid = (high + low)/2;

            // Determine the Line
            var x1, y1, x2, y2;

            x1 = x + lengthdir_x(low, angle);
            y1 = y + lengthdir_y(low, angle);
            x2 = x + lengthdir_x(mid, angle);
            y2 = y + lengthdir_y(mid, angle);

            // Determine whether or not the Line Segment is Blocked
            if(collision_line(x1, y1, x2, y2, par_static, true, true))
                high = mid;
            else
                low = mid;
        }

        // Update the Middle
        var mid = (high + low)/2;

        // Update the Point
        xx = x + lengthdir_x(mid, angle);
        yy = y + lengthdir_y(mid, angle);
    }

    // Register the Next Triangle
    if(i &gt; 0)
    {
        var triangle = ds_list_create();
        ds_list_add(triangle, x, y, xprev, yprev, xx, yy);

        ds_list_add(sight_polygon, triangle);
    }

    xprev = xx;
    yprev = yy;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Detection Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Detection Control *//
// Search for Triangle Entities
var target_found = false;

with(par_entity)
{
    for(var i = 0; i &lt; ds_list_size(other.sight_polygon); i++)
    {
        // Determine the Current Triangle
        var triangle = ds_list_find_value(other.sight_polygon, i);

        // Determine the Points in the Triangle
        var x1, y1, x2, y2, x3, y3;

        x1 = ds_list_find_value(triangle, 0);
        y1 = ds_list_find_value(triangle, 1);
        x2 = ds_list_find_value(triangle, 2);
        y2 = ds_list_find_value(triangle, 3);
        x3 = ds_list_find_value(triangle, 4);
        y3 = ds_list_find_value(triangle, 5);

        if(point_in_triangle(x, y, x1, y1, x2, y2, x3, y3))
        {
            other.target = id;
            target_found = true;
            break;
        }
    }

    if(target_found)
        break;
}

// Clear Lost Target
if(!target_found)
    target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JS API Trigger</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* JS API Trigger *//
// Make sure the API Map Exists
if(!ds_exists(js_api, ds_type_map))
    exit;

// Determine the API Attributes
var type, name, value;

type = ds_map_find_value(js_api, "type");
name = ds_map_find_value(js_api, "name");
value = ds_map_find_value(js_api, "value");

switch(type)
{
    case "get":
        // Create the Variable Map
        var variables = ds_map_create();

        // Check for Special Case
        if(name == "all")
        {
            // Register all Variables
            ds_map_add(js_callback, "sight_distance", sight_distance);
            ds_map_add(js_callback, "sight_angle", sight_angle);
            ds_map_add(js_callback, "sight_precision", sight_precision);
            ds_map_add_list(js_callback, "sight_polygon", sight_polygon);
            ds_map_add(js_callback, "target", target);
        }
        else
        {
            switch(name)
            {
                case "sight_distance": ds_map_add(js_callback, name, sight_distance); break;
                case "sight_angle": ds_map_add(js_callback, name, sight_angle); break;
                case "sight_precision": ds_map_add(js_callback, name, sight_precision); break;
                case "sight_polygon": ds_map_add_list(js_callback, name, sight_polygon); break;
                case "target": ds_map_add(js_callback, name, target); break;
            }
        }
        break;

    case "set":
        switch(name)
        {
            case "sight_distance": sight_distance = value; break;
            case "sight_angle": sight_angle = value; break;
            case "sight_precision": sight_precision = value; break;
            case "target": target = value; break;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Do the Inherited Event
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Draw Control *//
// Draw Self
draw_self();

// Draw the Sight Polygon
if(instance_exists(target))
    draw_set_color(c_yellow);
else
    draw_set_color(c_green);

for(var i = 0; i &lt; ds_list_size(sight_polygon); i++)
{
    // Determine the Current Triangle
    var triangle = ds_list_find_value(sight_polygon, i);

    // Determine the Verteces of the Triangle
    var x1, y1, x2, y2, x3, y3;

    x1 = ds_list_find_value(triangle, 0);
    y1 = ds_list_find_value(triangle, 1);
    x2 = ds_list_find_value(triangle, 2);
    y2 = ds_list_find_value(triangle, 3);
    x3 = ds_list_find_value(triangle, 4);
    y3 = ds_list_find_value(triangle, 5);

    // Draw the Triangle
    draw_triangle(x1, y1, x2, y2, x3, y3, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
