<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_all</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Creation Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Creation Control *//
// Make sure a Physical Representation of the World Exists
if(!instance_exists(phys_world))
    instance_create(0, 0, phys_world);

// Determine the Mask Type
mask_type = ds_map_find_value(phys_world.masks, sprite_index);

// Create a Polygon Representation of the Collision Mask
phys_polygon = sprite_get_bbox_polygon(sprite_index, image_xscale, image_yscale, mask_type);

// Move the Polygon to the Instance Position
ds_polygon_set_x(phys_polygon, x);
ds_polygon_set_y(phys_polygon, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Memory Management</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Memory Management *//
// Destroy the Polygon
ds_polygon_destroy(phys_polygon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Collision Control *//
// Bound Object X
if(phy_position_x &lt; -128)
    instance_destroy();
else if(phy_position_x &gt; room_width+128)
    instance_destroy();

// Bound Object Y
if(phy_position_y &lt; -128)
    instance_destroy();
else if(phy_position_y &gt; room_height+128)
    instance_destroy();

// Concur with Physics Engine
x = phy_position_x;
y = phy_position_y;
image_angle = -phy_rotation;

// Update Physics Polygon
ds_polygon_set_x(phys_polygon, x);
ds_polygon_set_y(phys_polygon, y);
ds_polygon_set_rotation(phys_polygon, image_angle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inheritance Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* Inheritance Control *//
// Cascade Inheritance
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JS API Trigger</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//* JS API Trigger *//
// Make sure the API Map Exists
if(!ds_exists(js_api, ds_type_map))
    exit;

// Determine the API Attributes
var type, name, value;

type = ds_map_find_value(js_api, "type");
name = ds_map_find_value(js_api, "name");
value = ds_map_find_value(js_api, "value");

// Create the Callback Map
var js_callback = ds_map_create();

switch(type)
{
    case "get":
        // Create the Variable Map
        var variables = ds_map_create();

        // Check for Special Case
        if(name == "all")
        {
            // Register all Variables
            ds_map_add(js_callback, "mask_type", mask_type);
            ds_map_add(js_callback, "phy_active", phy_active);
            ds_map_add(js_callback, "phy_angular_damping", phy_angular_damping);
            ds_map_add(js_callback, "phy_angular_velocity", phy_angular_velocity);
            ds_map_add(js_callback, "phy_bullet", phy_bullet);
            ds_map_add(js_callback, "phy_fixed_rotation", phy_fixed_rotation);
            ds_map_add(js_callback, "phy_linear_damping", phy_linear_damping);
            ds_map_add(js_callback, "phy_linear_velocity_x", phy_linear_velocity_x);
            ds_map_add(js_callback, "phy_linear_velocity_y", phy_linear_velocity_y);
            ds_map_add(js_callback, "phy_position_x", phy_position_x);
            ds_map_add(js_callback, "phy_position_y", phy_position_y);
            ds_map_add(js_callback, "phy_rotation", phy_rotation);
            ds_map_add(js_callback, "phy_speed_x", phy_speed_x);
            ds_map_add(js_callback, "phy_speed_y", phy_speed_y);
            ds_map_add_map(js_callback, "phys_polygon", phys_polygon);
        }
        else
        {
            switch(name)
            {
                case "mask_type": ds_map_add(js_callback, name, mask_type); break;
                case "phy_active": ds_map_add(js_callback, name, phy_active); break;
                case "phy_angular_damping": ds_map_add(js_callback, name, phy_angular_damping); break;
                case "phy_angular_velocity": ds_map_add(js_callback, name, phy_angular_velocity); break;
                case "phy_bullet": ds_map_add(js_callback, name, phy_bullet); break;
                case "phy_fixed_rotation": ds_map_add(js_callback, name, phy_fixed_rotation); break;
                case "phy_linear_damping": ds_map_add(js_callback, name, phy_linear_damping); break;
                case "phy_linear_velocity_x": ds_map_add(js_callback, name, phy_linear_velocity_x); break;
                case "phy_linear_velocity_y": ds_map_add(js_callback, name, phy_linear_velocity_y); break;
                case "phy_position_x": ds_map_add(js_callback, name, phy_position_x); break;
                case "phy_position_y": ds_map_add(js_callback, name, phy_position_y); break;
                case "phy_rotation": ds_map_add(js_callback, name, phy_rotation); break;
                case "phy_speed_x": ds_map_add(js_callback, name, phy_speed_x); break;
                case "phy_speed_y": ds_map_add(js_callback, name, phy_speed_y); break;
                case "phys_polygon": ds_map_add_map(js_callback, name, phys_polygon); break;
            }
        }
        break;

    case "set":
        switch(name)
        {
            case "phy_active": phy_active = value; break;
            case "phy_angular_damping": phy_angular_damping = value; break;
            case "phy_angular_velocity": phy_angular_velocity = value; break;
            case "phy_bullet": phy_bullet = value; break;
            case "phy_fixed_rotation": phy_fixed_rotation = value; break;
            case "phy_linear_damping": phy_linear_damping = value; break;
            case "phy_linear_velocity_x": phy_linear_velocity_x = value; break;
            case "phy_linear_velocity_y": phy_linear_velocity_y = value; break;
            case "phy_position_x": phy_position_x = value; break;
            case "phy_position_y": phy_position_y = value; break;
            case "phy_rotation": phy_rotation = value; break;
            case "phy_speed_x": phy_speed_x = value; break;
            case "phy_speed_y": phy_speed_y = value; break;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
draw_set_alpha(1);
draw_polygon(phys_polygon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
